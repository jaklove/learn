1.基于 Redis 如何实现一个分布式锁？
2.Redis 分布式锁真的安全吗？
3.Redis 锁改进版的 Redlock 有什么问题？一定安全吗？
4.业界争论 Redlock，到底在争论什么？哪种观点是对的？
5.分布式锁到底用 Redis 还是 Zookeeper？
6.实现一个有「容错性」的分布式锁，都需要考虑哪些问题？


为什么需要分布式锁？
   在开始讲分布式锁之前，有必要简单介绍一下，为什么需要分布式锁？
 与分布式锁相对应的是「单机锁」，我们在写多线程程序时，避免同时操作一个共享变量产生数据问题，通常会使用一把锁来「互斥」，以保证共享变量的正确性，其使用范围是在「同一个进程」中。
 例如，现在的业务应用通常都是微服务架构，这也意味着一个应用会部署多个进程，那这多个进程如果需要修改 MySQL 中的同一行记录时，为了避免操作乱序导致数据错误，
 此时，我们就需要引入「分布式锁」来解决这个问题了。

 分布式锁怎么实现？
   想要实现分布式锁，必须要求 Redis 有「互斥」的能力，我们可以使用 SETNX 命令，这个命令表示SET if Not eXists，即如果 key 不存在，才会设置它的值，否则什么也不做。
   操作完成后，还要及时释放锁，给后来者让出操作共享资源的机会。如何释放锁呢？
   也很简单，直接使用 DEL 命令删除这个 key 即可：

 但是，它存在一个很大的问题，当客户端 1 拿到锁后，如果发生下面的场景，就会造成「死锁」:
   1.程序处理业务逻辑异常，没及时释放锁
   2.进程挂了，没机会释放锁

 这时，这个客户端就会一直占用这个锁，而其它客户端就「永远」拿不到这把锁了。

 如何避免死锁？
  我们很容易想到的方案是，在申请锁时，给这把锁设置一个「租期」。还是有问题?
  现在的操作，加锁、设置过期是 2 条命令，有没有可能只执行了第一条，第二条却「来不及」执行的情况发生呢？例如：
  1.SETNX 执行成功，执行 EXPIRE 时由于网络问题，执行失败
  2.SETNX 执行成功，Redis 异常宕机，EXPIRE 没有机会执行
  3.SETNX 执行成功，客户端异常崩溃，EXPIRE 也没有机会执行

总之，这两条命令不能保证是原子操作（一起成功），就有潜在的风险导致过期时间设置失败，依旧发生「死锁」问题。

在 Redis 2.6.12 版本之前，我们需要想尽办法，保证 SETNX 和 EXPIRE 原子性执行，还要考虑各种异常情况如何处理。

// 一条命令保证原子性执行
SET lock 1 EX 10 NX

试想这样一种场景：
1.客户端 1 加锁成功，开始操作共享资源
2.客户端 1 操作共享资源的时间，「超过」了锁的过期时间，锁被「自动释放」
3.客户端 2 加锁成功，开始操作共享资源
4.客户端 1 操作共享资源完成，释放锁（但释放的是客户端 2 的锁）

看到了么，这里存在两个严重的问题：
1.锁过期：客户端 1 操作共享资源耗时太久，导致锁被自动释放，之后被客户端 2 持有
2.释放别人的锁：客户端 1 操作共享资源完成后，却又释放了客户端 2 的锁

第二个问题在于，一个客户端释放了其它客户端持有的锁?
 重点在于，每个客户端在释放锁时，都是「无脑」操作，并没有检查这把锁是否还「归自己持有」，所以就会发生释放别人锁的风险，这样的解锁流程，很不「严谨」

解决办法是：客户端在加锁时，设置一个只有自己知道的「唯一标识」进去。
 例如，可以是自己的线程 ID，也可以是一个 UUID（随机且唯一），这里我们以 UUID 举例：
 // 锁的VALUE设置为UUID  SET lock $uuid EX 20 NX
 // 锁是自己的，才释放
 if redis.get("lock") == $uuid:
     redis.del("lock")

这里释放锁使用的是 GET + DEL 两条命令，这时，又会遇到我们前面讲的原子性问题了。
 1.客户端 1 执行 GET，判断锁是自己的
 2.客户端 2 执行了 SET 命令，强制获取到锁（虽然发生概率比较低，但我们需要严谨地考虑锁的安全性模型）
 3.客户端 1 执行 DEL，却释放了客户端 2 的锁

 由此可见，这两个命令还是必须要原子执行才行。
 怎样原子执行呢？Lua 脚本。我们可以把这个逻辑，写成 Lua 脚本，让 Redis 来执行。
 （因为 Redis 处理每一个请求是「单线程」执行的，在执行一个 Lua 脚本时，其它请求必须等待，直到这个 Lua 脚本处理完成，这样一来，GET + DEL 之间就不会插入其它命令了。）

 // 判断锁是自己的，才释放
 if redis.call("GET",KEYS[1]) == ARGV[1]
 then
     return redis.call("DEL",KEYS[1])
 else
     return 0
 end

这里我们先小结一下，基于 Redis 实现的分布式锁，一个严谨的的流程如下：
   1.加锁：SET lock_key $unique_id EX $expire_time NX
   2.操作共享资源
   3.释放锁：Lua 脚本，先 GET 判断锁是否归属自己，再 DEL 释放锁

锁过期时间不好评估怎么办？
  前面我们提到，锁的过期时间如果评估不好，这个锁就会有「提前」过期的风险。
当时给的妥协方案是，尽量「冗余」过期时间，降低锁提前过期的概率。
是否可以设计这样的方案：加锁时，先设置一个过期时间，然后我们开启一个「守护线程」，定时去检测这个锁的失效时间，如果锁快要过期了，
操作共享资源还未完成，那么就自动对锁进行「续期」，重新设置过期时间。

如果你是 Java 技术栈，幸运的是，已经有一个库把这些工作都封装好了：Redisson。
Redisson 是一个 Java 语言实现的 Redis SDK 客户端，在使用分布式锁时，它就采用了「自动续期」的方案来避免锁过期，这个守护线程我们一般也把它叫做「看门狗」线程。

   之前分析的场景都是，锁在「单个」Redis 实例中可能产生的问题，并没有涉及到 Redis 的部署架构细节。
而我们在使用 Redis 时，一般会采用主从集群 + 哨兵的模式部署，这样做的好处在于，当主库异常宕机时，哨兵可以实现「故障自动切换」，把从库提升为主库，继续提供服务，以此保证可用性。

那当「主从发生切换」时，这个分布锁会依旧安全吗？
为此，Redis 的作者提出一种解决方案，就是我们经常听到的 Redlock（红锁）。

Redlock 真的安全吗？
  Redlock 的方案基于 2 个前提：
  1.不再需要部署从库和哨兵实例，只部署主库
  2.但主库要部署多个，官方推荐至少 5 个实例
也就是说，想用使用 Redlock，你至少要部署 5 个 Redis 实例，而且都是主库，它们之间没有任何关系，都是一个个孤立的实例

Redlock 具体如何使用呢？
   整体的流程是这样的，一共分为 5 步：
   1.客户端先获取「当前时间戳T1」
   2.客户端依次向这 5 个 Redis 实例发起加锁请求（用前面讲到的 SET 命令），
     且每个请求会设置超时时间（毫秒级，要远小于锁的有效时间），
     如果某一个实例加锁失败（包括网络超时、锁被其它人持有等各种异常情况），就立即向下一个 Redis 实例申请加锁,
   3.如果客户端从 >=3 个（大多数）以上 Redis 实例加锁成功，则再次获取「当前时间戳T2」，如果 T2 - T1 < 锁的过期时间，此时，认为客户端加锁成功，否则认为加锁失败。
   4.加锁成功，去操作共享资源（例如修改 MySQL 某一行，或发起一个 API 请求）
   5.锁失败，向「全部节点」发起释放锁请求（前面讲到的 Lua 脚本释放锁）

我简单帮你总结一下，有 4 个重点：
  1.客户端在多个 Redis 实例上申请加锁
  2.必须保证大多数节点加锁成功
  3.大多数节点加锁的总耗时，要小于锁设置的过期时间
  4.释放锁，要向全部节点发起释放锁请求

1) 为什么要在多个实例上加锁？
   本质上是为了「容错」，部分实例异常宕机，剩余的实例加锁成功，整个锁服务依旧可用。

2) 为什么大多数加锁成功，才算成功？
  多个 Redis 实例一起来用，其实就组成了一个「分布式系统」。
在分布式系统中，总会出现「异常节点」，所以，在谈论分布式系统问题时，需要考虑异常节点达到多少个，也依旧不会影响整个系统的「正确性」。
这是一个分布式系统「容错」问题，这个问题的结论是：如果只存在「故障」节点，只要大多数节点正常，那么整个系统依旧是可以提供正确服务的。

3) 为什么步骤 3 加锁成功后，还要计算加锁的累计耗时？
   因为操作的是多个节点，所以耗时肯定会比操作单个实例耗时更久，而且，因为是网络请求，网络情况是复杂的，
有可能存在延迟、丢包、超时等情况发生，网络请求越多，异常发生的概率就越大。所以，即使大多数节点加锁成功，
但如果加锁的累计耗时已经「超过」了锁的过期时间，那此时有些实例上的锁可能已经失效了，这个锁就没有意义了。


4) 为什么释放锁，要操作所有节点？
   在某一个 Redis 节点加锁时，可能因为「网络原因」导致加锁失败。
  例如，客户端在一个 Redis 实例上加锁成功，但在读取响应结果时，网络问题导致读取失败，那这把锁其实已经在 Redis 上加锁成功了。
  所以，释放锁时，不管之前有没有加锁成功，需要释放「所有节点」的锁，以保证清理节点上「残留」的锁。
  好了，明白了 Redlock 的流程和相关问题，看似 Redlock 确实解决了 Redis 节点异常宕机锁失效的问题，保证了锁的「安全性」。


Redlock 的争论谁对谁错？